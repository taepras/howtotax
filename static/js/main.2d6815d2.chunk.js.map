{"version":3,"sources":["components/D3Component.jsx","App.js","reportWebVitals.js","index.js"],"names":["transitionDuration","D3Component","income","expense","allowance","taxBrackets","width","height","padding","d3Container","useRef","cleanedExpense","useMemo","Math","max","cleanedAllowance","netIncome","scaleIncome","useCallback","d3","domain","range","barHeight","scaleTaxRate","axisIncomeBottom","axisIncomeTop","axisTaxRate","tickFormat","useState","isPullTax","setPullTax","useEffect","current","svg","select","attr","transition","duration","style","console","log","bracketLineGroups","selectAll","data","bracketLineGroupsEnter","enter","append","classed","merge","d","taxRate","minNetIncome","maxNetIncome","text","toString","replace","taxParts","taxPartsEnter","taxCamouflageParts","taxCamouflagePartsEnter","call","className","ref","onClick","App","setIncome","setExpense","setAllowance","taxFinal","sumTax","remainingNetIncome","i","bracketRange","min","type","step","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6815d2.chunk.js","sourcesContent":["import React, { useRef, useEffect, useMemo, useCallback, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n// import { transition } from 'd3';\r\n\r\nconst transitionDuration = 1000\r\n\r\nexport const D3Component = ({\r\n    income,\r\n    expense,\r\n    allowance,\r\n    taxBrackets,\r\n    width = 800,\r\n    height = 500,\r\n    padding = 50,\r\n}) => {\r\n    const d3Container = useRef(null);\r\n\r\n    const cleanedExpense = useMemo(() => expense < (income - allowance) ? +expense : +Math.max(0, income - allowance), [income, expense]);\r\n    const cleanedAllowance = useMemo(() => allowance < income ? +allowance : +income, [income, allowance]);\r\n\r\n    const netIncome = useMemo(() => {\r\n        return Math.max(income - expense - allowance, 0);\r\n    }, [income, expense, allowance]);\r\n\r\n    const scaleIncome = useCallback(\r\n        d3.scaleLinear()\r\n            .domain([0, Math.max(300_000, income * 1.5)])\r\n            .range([0, width])\r\n        , [income])\r\n\r\n    const barHeight = useMemo(() => height - 50 - padding * 2, [height, padding]);\r\n\r\n    const scaleTaxRate = useCallback(\r\n        d3.scaleLinear()\r\n            .domain([1, 0])\r\n            .range([0, barHeight])\r\n        , [income])\r\n\r\n    const axisIncomeBottom = useMemo(() => d3.axisBottom(scaleIncome), [scaleIncome]);\r\n    const axisIncomeTop = useMemo(() => d3.axisTop(scaleIncome), [scaleIncome]);\r\n    const axisTaxRate = useMemo(() => d3.axisLeft(scaleTaxRate).tickFormat(d3.format('.0%'))\r\n        , [scaleTaxRate]);\r\n\r\n    const [isPullTax, setPullTax] = useState(false);\r\n\r\n    const numberWithCommas = (x) => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n\r\n    useEffect(() => {\r\n        if (d3Container.current) {\r\n\r\n            const svg = d3.select(d3Container.current);\r\n\r\n            svg.select('g.container')\r\n                .attr('transform', `translate(${padding}, ${padding})`);\r\n\r\n            svg.select('rect.net-income')\r\n                .attr('height', barHeight)\r\n                .transition().duration(transitionDuration)\r\n                .style('fill', '#08f')\r\n                .attr('width', Math.max(0, scaleIncome(netIncome)));\r\n\r\n            console.log('netIncome + cleanedAllowance', netIncome + cleanedAllowance, cleanedAllowance, scaleIncome(cleanedAllowance))\r\n            svg.select('rect.expense')\r\n                .attr('height', barHeight)\r\n                .transition().duration(transitionDuration)\r\n                .style('fill', '#135')\r\n                .attr('x', scaleIncome(netIncome + cleanedAllowance))\r\n                .attr('width', Math.max(0, scaleIncome(cleanedExpense)));\r\n\r\n            svg.select('rect.allowance')\r\n                .attr('height', barHeight)\r\n                .transition().duration(transitionDuration)\r\n                .style('fill', '#147')\r\n                .attr('x', scaleIncome(netIncome))\r\n                .attr('width', Math.max(0, scaleIncome(cleanedAllowance)));\r\n\r\n            const bracketLineGroups = svg.select('g.tax-lines')\r\n                .selectAll('g')\r\n                .data(taxBrackets)\r\n\r\n            const bracketLineGroupsEnter = bracketLineGroups\r\n                .enter()\r\n                .append('g')\r\n                .classed('bracket', true)\r\n\r\n            bracketLineGroupsEnter.append('text').classed('bracket-rate-text', true)\r\n            bracketLineGroupsEnter.append('text').classed('bracket-min-text', true)\r\n            bracketLineGroupsEnter.append('rect').classed('bracket-rect', true)\r\n            bracketLineGroupsEnter.append('line').classed('bracket-line', true)\r\n\r\n            // bracketTextEnter\r\n            //     .append('text')\r\n            //     .text(d => `อัตราภาษี ${d.taxRate * 100}%\\nเริ่มที่เงินได้ ${d.minNetIncome}`)\r\n            // bracketTextEnter\r\n            //     .append('text')\r\n            //     .text(d => `อัตราภาษี ${d.taxRate * 100}%\\nเริ่มที่เงินได้ ${d.minNetIncome}`)\r\n\r\n            bracketLineGroups.merge(bracketLineGroupsEnter)\r\n                .select('rect')\r\n                .attr('y', d => scaleTaxRate(d.taxRate))\r\n                .attr('height', d => scaleTaxRate(1 - d.taxRate))\r\n                .style('fill-opacity', 0)\r\n                .style('stroke', '#f80')\r\n                .transition().duration(transitionDuration)\r\n                .attr('x', d => scaleIncome(d.minNetIncome))\r\n                .attr('width', d => scaleIncome(d.maxNetIncome - d.minNetIncome))\r\n\r\n            bracketLineGroups.merge(bracketLineGroupsEnter)\r\n                .select('line')\r\n                .attr('y1', 0)\r\n                .attr('y2', barHeight)\r\n                .style('stroke', '#f80')\r\n                .style(\"stroke-dasharray\", \"3, 3\")\r\n                .transition().duration(transitionDuration)\r\n                // .style('stroke-opacity', '0.4')\r\n                .attr('x1', d => scaleIncome(d.maxNetIncome))\r\n                .attr('x2', d => scaleIncome(d.maxNetIncome))\r\n\r\n            bracketLineGroups.merge(bracketLineGroupsEnter)\r\n                .select('text.bracket-rate-text')\r\n                .style('fill', '#f80')\r\n                .attr('y', -30)\r\n                .transition().duration(transitionDuration)\r\n                .text(d => `อัตราภาษี ${d.taxRate * 100}%`)\r\n                .style('fill-opacity', d => scaleIncome(d.maxNetIncome - d.minNetIncome) > 150 ? 1 : 0)\r\n                .attr('x', d => scaleIncome(d.minNetIncome))\r\n\r\n            bracketLineGroups.merge(bracketLineGroupsEnter)\r\n                .select('text.bracket-min-text')\r\n                .style('fill', '#f80')\r\n                .attr('y', -10)\r\n                .transition().duration(transitionDuration)\r\n                .text(d => scaleIncome(d.maxNetIncome - d.minNetIncome) > 150\r\n                    ? `เริ่มคิดที่ ${numberWithCommas(d.minNetIncome)} บาท`\r\n                    : `${d.taxRate * 100}%`)\r\n                .style('fill-opacity', d => scaleIncome(d.maxNetIncome - d.minNetIncome) > 50 ? 1 : 0)\r\n                .attr('x', d => scaleIncome(d.minNetIncome))\r\n\r\n\r\n\r\n            const taxParts = svg.select('g.tax-parts')\r\n                .selectAll('rect')\r\n                .data(taxBrackets)\r\n\r\n            const taxPartsEnter = taxParts\r\n                .enter()\r\n                .append('rect')\r\n                .style('fill', '#f80')\r\n                .style('fill-opacity', 1)\r\n\r\n            taxParts.merge(taxPartsEnter)\r\n                .attr('y', d => scaleTaxRate(d.taxRate))\r\n                .attr('height', d => barHeight * d.taxRate)\r\n                .transition().duration(transitionDuration)\r\n                .attr('x', d => scaleIncome(d.minNetIncome))\r\n                .attr('width', d => {\r\n                    if (netIncome > d.minNetIncome) {\r\n                        if (netIncome < d.maxNetIncome)\r\n                            return scaleIncome(netIncome - d.minNetIncome)\r\n                        else\r\n                            return scaleIncome(d.maxNetIncome - d.minNetIncome);\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                })\r\n\r\n            console.log(isPullTax);\r\n            svg.select('g.tax-parts')\r\n                .transition()\r\n                .attr('transform', isPullTax ? `translate(0, ${padding + 20})` : 'translate(0, 0)');\r\n\r\n\r\n            const taxCamouflageParts = svg.select('g.tax-camouflage')\r\n                .selectAll('rect')\r\n                .data(taxBrackets)\r\n\r\n            const taxCamouflagePartsEnter = taxCamouflageParts\r\n                .enter()\r\n                .append('rect')\r\n                .style('fill', '#222')\r\n                .style('stroke', '#222')\r\n                .style('fill-opacity', 1)\r\n\r\n            taxCamouflageParts.merge(taxCamouflagePartsEnter)\r\n                .attr('y', d => scaleTaxRate(d.taxRate))\r\n                .attr('height', d => scaleTaxRate(1 - d.taxRate))\r\n                .transition().duration(transitionDuration)\r\n                .attr('x', d => scaleIncome(d.minNetIncome))\r\n                .attr('width', d => {\r\n                    if (netIncome > d.minNetIncome) {\r\n                        if (netIncome < d.maxNetIncome)\r\n                            return scaleIncome(netIncome - d.minNetIncome)\r\n                        else\r\n                            return scaleIncome(d.maxNetIncome - d.minNetIncome);\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                })\r\n\r\n\r\n            // AXES\r\n\r\n            d3.select(\"g.axis-income-bottom\")\r\n                .attr(\"transform\", `translate(0, ${barHeight})`)\r\n                .transition().duration(transitionDuration)\r\n                .call(axisIncomeBottom);\r\n\r\n            // d3.select(\"g.axis-income-top\")\r\n            //     .attr(\"transform\", `translate(0, -10)`)\r\n            //     .transition().duration(transitionDuration)\r\n            //     .call(axisIncomeTop);\r\n\r\n            d3.select(\"g.axis-tax-rate\")\r\n                // .attr(\"transform\", `translate(-10, 0)`)\r\n                .transition().duration(transitionDuration)\r\n                .call(axisTaxRate);\r\n\r\n            // var squareDim = 10; // pixel dimensions of square\r\n            // var boxesPerRow = 15;\r\n\r\n            // const boxesGroups = svg\r\n            //     .selectAll('g.box')\r\n            //     .data(d3Data, (d, i) => i)\r\n\r\n            // const boxesGroupsEnter = boxesGroups\r\n            //     .enter()\r\n            //     .append('g')\r\n            //     .classed('box', true)\r\n            //     .attr('id', (d, i) => `box-${i}`)\r\n            //     .attr('transform', (d, i) => {\r\n            //         let x = Math.floor(i / boxesPerRow) * (squareDim + 2);\r\n            //         let y = Math.floor(i % boxesPerRow) * (squareDim + 2);\r\n            //         return `translate(${x}, ${y})`;\r\n            //     });\r\n\r\n            // boxesGroupsEnter\r\n            //     .append('rect')\r\n            //     .classed('box-rect', true)\r\n            //     .style('fill', '#c62828')\r\n\r\n            // boxesGroups.merge(boxesGroupsEnter)\r\n            //     .attr('data-box-amount', d => d)\r\n\r\n            // boxesGroups.merge(boxesGroupsEnter)\r\n            //     .select('rect.box-rect')\r\n            //     .attr('data-box-amount', d => d)\r\n            //     .attr('width', squareDim)\r\n            //     .attr('height', d => squareDim * (d / amountPerBox))\r\n\r\n            // console.log(d3Data)\r\n            // boxesGroups.exit().remove();\r\n            // boxGroups.exit().remove();\r\n        }\r\n    }, [\r\n        d3Container,\r\n        isPullTax,\r\n        barHeight,\r\n        scaleIncome,\r\n        netIncome,\r\n        income,\r\n        expense,\r\n        allowance,\r\n        taxBrackets,\r\n        height,\r\n        padding,\r\n        axisIncomeTop,\r\n        axisIncomeBottom,\r\n        axisTaxRate,\r\n        cleanedAllowance,\r\n        cleanedExpense,\r\n        scaleTaxRate\r\n    ]);\r\n\r\n    return (<>\r\n        <svg\r\n            className=\"d3-component\"\r\n            width={width}\r\n            height={height}\r\n            ref={d3Container}\r\n        >\r\n            <g className=\"container\">\r\n                <rect className=\"net-income\" />\r\n                <rect className=\"expense\" />\r\n                <rect className=\"allowance\" />\r\n                <g className=\"tax-lines\" />\r\n                <g className=\"tax-camouflage\" />\r\n                <g className=\"axis-income-top\" />\r\n                <g className=\"axis-income-bottom\" />\r\n                <g className=\"axis-tax-rate\" />\r\n                <g className=\"tax-parts\" />\r\n            </g>\r\n        </svg>\r\n        <p>{netIncome}</p>\r\n        <button onClick={() => setPullTax(!isPullTax)}>Tax</button>\r\n    </>);\r\n}","import { useMemo, useState } from \"react\";\nimport { D3Component } from \"./components/D3Component\";\nimport \"./App.css\";\n\n\n\nfunction App() {\n  const [income, setIncome] = useState(500000);\n  const [expense, setExpense] = useState(100000);\n  const [allowance, setAllowance] = useState(60000);\n\n  const netIncome = useMemo(() => {\n    return income - expense - allowance;\n  }, [income, expense, allowance]);\n\n  const taxBrackets = [\n    {\n      minNetIncome: 0,\n      maxNetIncome: 150000,\n      taxRate: 0\n    },\n    {\n      minNetIncome: 150000,\n      maxNetIncome: 300000,\n      taxRate: .05\n    },\n    {\n      minNetIncome: 300000,\n      maxNetIncome: 500000,\n      taxRate: .10\n    },\n    {\n      minNetIncome: 500000,\n      maxNetIncome: 750000,\n      taxRate: .15\n    },\n    {\n      minNetIncome: 750000,\n      maxNetIncome: 1000000,\n      taxRate: .20\n    },\n    {\n      minNetIncome: 1000000,\n      maxNetIncome: 2000000,\n      taxRate: .25\n    },\n    {\n      minNetIncome: 2000000,\n      maxNetIncome: 5000000,\n      taxRate: .30\n    },\n    {\n      minNetIncome: 5000000,\n      maxNetIncome: 999999999999,\n      taxRate: .35\n    }\n  ]\n\n  const taxFinal = useMemo(() => {\n    let sumTax = 0;\n    let remainingNetIncome = netIncome;\n    for (let i in taxBrackets) {\n      let bracketRange = (taxBrackets[i].maxNetIncome - taxBrackets[i].minNetIncome);\n      let incomeInBracket = Math.min(remainingNetIncome, bracketRange);\n      let taxInBracket = incomeInBracket * taxBrackets[i].taxRate;\n      sumTax += taxInBracket\n      remainingNetIncome -= bracketRange;\n      if (remainingNetIncome <= 0)\n        break;\n    }\n    return sumTax;\n  }, [netIncome]);\n\n  return (\n    <div className=\"my-app\">\n      <input\n        type=\"number\"\n        step={10000}\n        min={0}\n        value={income}\n        onChange={(e) => setIncome(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        step={10000}\n        min={0}\n        value={expense}\n        onChange={(e) => setExpense(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        step={10000}\n        min={0}\n        value={allowance}\n        onChange={(e) => setAllowance(e.target.value)}\n      />\n      <p>{netIncome}</p>\n      <p>{taxFinal}</p>\n      <D3Component income={income} expense={expense} allowance={allowance} taxBrackets={taxBrackets} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}